generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model notifications {
  notification_id Int                          @id @default(autoincrement())
  vehicle_id      Int?
  user_id         Int?
  status_active   notifications_status_active? @default(yes)
  push_token      String?                      @db.VarChar(255)
  created_at      DateTime?                    @default(now()) @db.Timestamp(0)
  vehicles        vehicles?                    @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_ibfk_2")
  users           users?                       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_ibfk_1")

  @@unique([user_id, vehicle_id], map: "user_id")
  @@index([vehicle_id], map: "vehicle_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ratings {
  rating_id  Int       @id @default(autoincrement())
  vehicle_id Int?
  user_id    Int?
  rating     Int?
  comment    String?   @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)
  vehicles   vehicles? @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: Cascade, onUpdate: NoAction, map: "ratings_ibfk_1")

  @@index([vehicle_id], map: "vehicle_id")
}

model routes {
  route_id       Int        @id @default(autoincrement())
  route_name     String?    @db.VarChar(100)
  starting_point String?    @db.VarChar(100)
  nombreInicio   String?    @db.VarChar(100)
  nombreFinal    String?    @db.VarChar(100)
  ending_point   String?    @db.VarChar(100)
  stops          stops[]
  vehicles       vehicles[]
}

model stop_schedules {
  schedule_id  Int       @id @default(autoincrement())
  stop_id      Int?
  arrival_time DateTime? @db.Time(0)
  stops        stops?    @relation(fields: [stop_id], references: [stop_id], onDelete: Cascade, onUpdate: NoAction, map: "stop_schedules_ibfk_1")

  @@index([stop_id], map: "stop_id")
}

model stops {
  stop_id        Int              @id @default(autoincrement())
  route_id       Int?
  stop_name      String?          @db.VarChar(100)
  latitude       String?          @db.VarChar(200)
  longitude      String?          @db.VarChar(200)
  sequence       Int?
  stop_schedules stop_schedules[]
  routes         routes?          @relation(fields: [route_id], references: [route_id], onDelete: Cascade, onUpdate: NoAction, map: "stops_ibfk_1")

  @@index([route_id], map: "route_id")
}

model users {
  user_id       Int             @id @default(autoincrement())
  username      String          @unique(map: "username") @db.VarChar(50)
  password_hash String          @db.VarChar(255)
  email         String          @unique(map: "email") @db.VarChar(100)
  role          users_role?     @default(user)
  status        users_status?   @default(unverified)
  created_at    DateTime?       @default(now()) @db.Timestamp(0)
  updated_at    DateTime?       @default(now()) @db.Timestamp(0)
  notifications notifications[]
}

model vehicle_locations {
  location_id Int                           @id @default(autoincrement())
  vehicle_id  Int?
  lat         Decimal?                      @db.Decimal(9, 6)
  lon         Decimal?                      @db.Decimal(9, 6)
  recorded_at DateTime?                     @default(now()) @db.Timestamp(0)
  event_type  vehicle_locations_event_type?
  direction   vehicle_locations_direction?
  vehicles    vehicles?                     @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: Cascade, onUpdate: NoAction, map: "vehicle_locations_ibfk_1")

  @@index([vehicle_id], map: "vehicle_id")
}

model vehicles {
  vehicle_id        Int                 @id @default(autoincrement())
  plate_number      String?             @db.VarChar(20)
  model             String?             @db.VarChar(50)
  capacity          Int?
  route_id          Int?
  notifications     notifications[]
  ratings           ratings[]
  vehicle_locations vehicle_locations[]
  routes            routes?             @relation(fields: [route_id], references: [route_id], onUpdate: NoAction, map: "vehicles_ibfk_1")

  @@index([route_id], map: "route_id")
}

enum users_role {
  admin
  user
}

enum users_status {
  active
  inactive
  verified
  unverified
}

enum vehicle_locations_event_type {
  start_route
  end_route
  stop
  significant_change
}

enum vehicle_locations_direction {
  outbound
  inbound
}

enum notifications_status_active {
  no
  yes
}
